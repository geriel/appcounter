{
  "name": "remote",
  "description": "Work on client-side files with a remote API server transparently",
  "version": "0.2.6",
  "repository": {
    "type": "git",
    "url": "git://github.com/gadr90/remote.git"
  },
  "main": "./libs/remote.coffee",
  "bin": {
    "remote": "./bin/remote.js"
  },
  "keywords": [
    "http",
    "parse",
    "host",
    "route",
    "router",
    "transparent",
    "remote",
    "api",
    "proxy",
    "reverse"
  ],
  "dependencies": {
    "send": "0.1.0",
    "commander": "1.1.1",
    "underscore": "1.4.x",
    "coffee-script": "1.4.x",
    "http-proxy": "0.10.0"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "license": "BSD",
  "contributors": [
    {
      "name": "Breno Calazans",
      "email": "breno@vtex.com.br",
      "url": "http://www.vtex.com.br"
    },
    {
      "name": "Augusto Barbosa",
      "email": "augusto@vtex.com.br",
      "url": "http://www.vtex.com.br"
    }
  ],
  "readmeFilename": "README.md",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Guilherme Rodrigues",
    "email": "gadr90@gmail.com"
  },
  "readme": "## Remote\n\n**Remote** is a simple CLI tool that enables you to work in local files while consuming an API from a remote server. An easy reverse proxy in Node, if you will.\n\nIf you'd like, it can also start a simple local server for your files.\n\nSimply specify\n\n- the address of your local files server, or where I should start one\n- the address of your remote API\n- the address of where to start a reverse proxy\n- a directory, if you want me to start a local server\n- some regex rules that define which files to serve locally, which to fetch from the remote host\n- optionally, you can map requests to specific files with the mappings option\n\nIt aims to solve the dreaded **cross domain request** problem, so you can freely *ajax* like you have a local server-side.\n\n### Install\n\n\tnpm install -g remote\n\n### Quickstart\n\nAfter installing, create a `remote.json` configuration file (check the example folder) and simply call `remote`.\n\n### Usage - command line\n\n  remote [options]\n\n\t\tOptions:\n\n\t\t\t-h, --help                output usage information\n\t\t\t-V, --version             output the version number\n\t\t\t-d, --directory [path]    Path to a local folder. If defined, will serve files at server address. [undefined]\n\t\t\t-r, --remote [host:port]  Address of the remote API [localhost:80]\n\t\t\t-p, --proxy [host:port]   Address of the reverse proxy server [localhost:9001]\n\t\t\t-s, --server [host:port]  Address of the static file server [localhost:9000]\n\t\t\t-m, --mapping             Whether to use the mapping rules [false]\n\t\t\t-f, --file [remote.json]  Specific configuration file [remote.json]\n\n### Usage - configuration file (remote.json)\n\nSee the example configuration file at the example folder.\n\nRead on for the possible options for your `remote.json` file.\n\n### Bounces\n\nThis is the simplest `remote.json`, with some bounce rules defined:\n\n\t{\n\t\t\"directory\" : \"./src/\",\n\t\t\"remote\" : {\"host\": \"remote-api-host.com\", \"port\": 80},\n\t\t\"bounces\" : [\n\t\t    \"public/.*\",\n\t\t    \"assets/.*\"\n\t\t]\n\t}\n\nIn this case, any call to `localhost:3000/public/(...)` or `localhost:3000/assets/(...)`  will be *bounced* to your local files under `./src/`.\nOther URL's will be forwarded to `remote-api-host.com`\n\n### Headers\n\nYou may wish to send along some headers with your request. For example:\n\n    {\n\t\t\t\"directory\" : \"./src/\",\n\t\t\t\"remote\" : {\"host\": \"remote-api-host.com\", \"port\": 80},\n\t\t\t\"headers\": {\n\t\t\t\t\t\"Host\": \"remote-api-host.com\",\n\t\t\t\t\t\"X-Secret-Header\" : \"awesome\"\n\t\t\t\t},\n\t\t\t\"bounces\" : [\n\t\t\t\t\t\"public/.*\",\n\t\t\t\t\t\"assets/.*\"\n\t\t\t\t]\n    }\n\nThese will be added to every request made by `remote`.\n\n### Mappings\n\nA mapping is like a bounce rule, only more specific. You define what you want served given a request URL. For example:\n\n    {\n\t\t\"directory\" : \"./src/\",\n\t\t\"remote\" : {\"host\": \"remote-api-host.com\", \"port\": 80},\n\t\t\"headers\": {\n\t\t\t\t\"Host\": \"remote-api-host.com\",\n\t\t\t\t\"X-Secret-Header\" : \"awesome\"\n\t\t},\n\t\t\"bounces\" : [\n\t\t    \"public/.*\",\n\t\t    \"assets/.*\"\n\t\t],\n        \"mapping\": true,\n        \"mappings\": {\n            \".*/api/users/1/remove\": {\"result\": \"ok\"},\n            \".*/api/users/.*\":\"./test/mocks/users-mock.json\",\n            \".*/files/.*\":\"./test/files/\",\n            \".*/public/js/awesome.js\":\"./src/special/path/awesome-2.js\"\n        }\n    }\n\n\nAs you can see, mappings can be:\n\n- A JSON object.\n- A path to any file.\n- A path to any directory (Remote will locate the requested file in the directory).\n\nWhen any of these URL's are requested, remote will serve the given resource.\n\n**Note that mappings take precedence over bounce rules!**\n\nYou can disable all mappings setting `mapping` to **false**.\n\n### Bounce to remote\n\nIf you like to keep things complicated, you may use the `bounceToRemote: true` option in your configuration file.\nThis will invert the `bounces` rules, so they will actually bounce to the remote API. All other requests will be forwarded to the local server.\n\n### Other notes\n\nCommand line options take precedence over `remote.json` options.\nAlso, any command line option may be specified in the json configuration file.\nHave fun!\n\n-----------------\n\n#### Note for Mac OS X users (or: *what to do when I get EMFILE errors*)\n\nOS X has a arbitrarily low limit for the amount of files that a process can open of 256.\nUse the `ulimit` command to check your current limit.\nFor sites with large amounts of files, or in any situation when encountering **EMFILE** errors, simply issue:\n\n    ulimit -n 2048\n\nOr any such large value, before turning on remote.\n\n-----------------\n\n### Changelog:\nv 0.2.6:\n\n- Ignores query string on mapping.\n- Starting unit tests with jasmine-node.\n\nv 0.2.5:\n\n- Serves images correctly. Really, this time.\n- Accepts mapping with 'http://' to change to arbitrary host.\n\nv 0.2.4:\n\n- Serves images correctly (utf8 issue fix, thanks Augusto).\n\nv 0.2.3:\n\n- Accepts directory for mappings.\n\nv 0.2.1:\n\n- File update and options scope fix.\n- Mappings should work now when applied in a file.\n\nv 0.2.0:\n\n- **Breaking changes** in API. Old remote.json files wont work.\n- Better options syntax\n- Bring you own local server. Now you can use remote as a reverse proxy, only.\n- Many fixes.\n\nv 0.1.0:\n\n- Major rewrite. Nothing of note before this ;)\n- Using nodejitsu's http-proxy\n- Add the capability to map arbitrary url to arbitrary files or JSON\n- Add the capability to add request headers",
  "bugs": {
    "url": "https://github.com/gadr90/remote/issues"
  },
  "_id": "remote@0.2.6",
  "_from": "remote@~0.2.6"
}
